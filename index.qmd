---
title: "Codes"
format: 
  html: 
    embed-resources: true
    page-layout: full
execute: 
  eval: false
  warning: false
toc: true
toc-location: left
title-block-banner: true
---


```{r}
#| eval: true
#| include: false
file.copy("index.html", "docs/index.html", overwrite = TRUE)
file.copy("language.html", "docs/language.html", overwrite = TRUE)

```

# Links to other pages

[Language](https://bariscr.github.io/codes_lists/language)


# R

## Wrangle

### Create a character from vector

```{r}
age_groups <- us_censusbureau_data |> distinct(age_group) |> pull()
reproductive_age_group <- age_groups[5:11]
cat(paste0('"', reproductive_age_group, '"', collapse = ", "))

```

### Split data based on categories of a variable


```{r}
list_of_datasets <- split(my_data, my_data$year)

for (category_name in names(list_of_datasets)) {
  assign(paste0("dataset_", category_name), list_of_datasets[[category_name]])
}
```



# SQL

## Connection

```{r}
con2 <- dbConnect(MySQL(),
  user = Sys.getenv("xxx"),
  password = Sys.getenv("xxx")
)

dbGetQuery(con2, "set names utf8")

```

## insert into

```{r}
a <- read_excel("/path/excel_file.xlsx",
           sheet = "done"
           ) |> 
  filter(!is.na(event)) |> 
  mutate(date_done = as.character(as.Date(date)),
         event = str_replace_all(event, "'", " "),
         )

a$id = 1:nrow(a)

for (i in 1:nrow(a)) {
  
dbGetQuery(con2, glue::glue('insert into daily.table_x (id, event, date_done)
                            values (
                                      ',  a$id[i], ',
                                     \'', a$event[i], '\',
                                     \'', a$date_done[i], '\');'))
}


```


# Datatable (DT)


```{r}
datatable(options = list(
                dom = 't',
                pageLength = 20,
                columnDefs = list(list(className = 'dt-right', targets = 1:4)
                                  )
                ),
                rownames= FALSE,
                colnames = c("Province", 
                             "Female", 
                             "Male", 
                             "Total", 
                             "Percentage")
                ) |> 
   formatRound(
    'perc',
    digits = 1
    ) |> 
   formatStyle(
    'perc',
    background = styleColorBar(t_gender_prov$perc, 'lightblue'),
    backgroundSize = '100% 90%',
    backgroundRepeat = 'no-repeat',
    backgroundPosition = 'center'
  ) 
```


```{r}
datatable(data, 
          rownames = FALSE,
          selection = 'single',
          escape = F,
          options = list(scrollX = TRUE,
                         iDisplayLength = 50,
                         initComplete = JS(
                           "function(settings, json) {",
                           "$('.dataTables_wrapper .dataTables_scroll .dataTables_scrollBody table.dataTable').css('font-size', '20px');",
                           "}"
                         )
          ))
```


## Columndefs

```{r}
columnDefs = list(
                 list(targets = "_all", width = "150px") 
```


# Excel

## Show all excel sheets as datatable

```{r}
library(purrr)

path <- "data/info.xlsx"

map(
  .x = excel_sheets(path),
  .f = function(x) {
    read_excel(path, sheet = x) |> DT::datatable()
  }
)

```

## Download all excel sheets to the environment

```{r}
walk(
  .x = excel_sheets(path),
  .f = function(x) {
    assign(x, read_excel(path, sheet = x), envir = .GlobalEnv)
  }
)

```


# Plotly

## Reference

[plotly-r.com](https://plotly-r.com/index.html)

## hline

```{r}
hline <- function(y = 0, color = "blue") {
  list(
    type = "line",
    x0 = 0,
    x1 = 1,
    xref = "paper",
    y0 = y,
    y1 = y,
    line = list(color = color)
  )
}
```


## Rectangle

```{r}
# Load required libraries
library(plotly)

# Sample data
df <- data.frame(
  x = seq(as.Date("2018-09-01"), as.Date("2018-12-31"), by = "days"),
  y = runif(122, min = 0, max = 100)
)

# Create the plot
fig <- plot_ly(df, x = ~x, y = ~y, type = 'scatter', mode = 'lines', line = list(color = 'blue'))

# Add the vertical rectangle using layout shapes
fig <- fig %>% layout(
  shapes = list(
    list(
      type = "rect",
      x0 = as.Date("2018-09-24"),  # Start x-coordinate of the rectangle
      x1 = as.Date("2018-12-18"),  # End x-coordinate of the rectangle
      y0 = 0,  # Start y-coordinate of the rectangle (y-axis minimum)
      y1 = 100,  # End y-coordinate of the rectangle (y-axis maximum)
      fillcolor = "green",
      opacity = 0.25,
      line = list(width = 0)
    )
  )
)

# Add annotation text to the rectangle
fig <- fig %>% layout(
  annotations = list(
    list(
      x = as.Date("2018-09-24"),  # x-coordinate of the annotation
      y = 100,  # y-coordinate of the annotation (top of the plot)
      text = "decline",
      showarrow = FALSE,
      font = list(color = "black"),
      xref = "x",
      yref = "y"
    )
  ),
  title = "Sample Plot with Vertical Rectangle",
  xaxis = list(title = "Date"),
  yaxis = list(title = "Value")
)

# Show the plot
fig


```




# File operations - use very carefully

```{r}
dir.create("/xxxxxxxxxx")
a
fs::dir_delete("/Users/xxxxx/xxxxxxxx/xxxxxxxx")
```

# Yedekleme

```{r}
# path i belirle
path <- "/Users/xxxxx/xxxx/dataxxxxxx"
# önce içerisinde directory oluştur
library(lubridate)
library(stringr)
a <- Sys.time()
a1 <- paste0(date(a),  "_", 
             formatC(ceiling(hour(a)), width = 2, flag = "0"),
             formatC(ceiling(minute(a)), width = 2, flag = "0"),
             formatC(ceiling(second(a)), width = 2, flag = "0"))

ek <- str_replace_all(a1, "-", "")

path_new <- paste0(path, "yedek_coord2_", ek, "/") # path i güncelle
#dir.create(path_new)

fs::dir_copy("/Users/xxxx/Documents/projectsxxxxxx/xxxx" , path_new)
```


# Shiny

## Creating a desktop app

* Open a text editor (Sublime Text)
* Write the following according to the path of your shiny file (the root where ui and server stands in a split case)
* The port is to your preference, any available and suitable port

```{r}
 R -e "shiny::runApp('/Users/xxxx/Documents/projects/xxxx/', port = xxxx)" &
 open http://127.0.0.1:xxxx/;
```

* Save the file as filename.command


# Shortcuts

## RStudio

Zoom in/out: Cmd + . / -


# To use in population projects

```{r}
reproductive_age_group <- c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49")
```

